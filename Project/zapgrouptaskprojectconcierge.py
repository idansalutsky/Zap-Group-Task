# -*- coding: utf-8 -*-
"""ZapGroupTaskProjectConcierge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18gNmh7M42nXKH9VcKXgHanEO7mliF4q8
"""

# ============================================================================
# ZAP.CO.IL PROJECT CONCIERGE - COMPLETE GOOGLE COLAB SOLUTION
# AI-Powered E-commerce Shopping Assistant - FIXED VERSION
# ============================================================================

# STEP 1: INSTALL DEPENDENCIES
import subprocess
import sys

def install_requirements():
    """Install all required packages"""
    packages = [
        'streamlit>=1.28.0',
        'openai>=1.3.0',
        'pandas>=1.5.0',
        'numpy>=1.24.0',
        'scikit-learn>=1.3.0',
        'pyngrok>=6.0.0',
        'python-dotenv>=1.0.0'
    ]

    for package in packages:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
    print("✅ All packages installed successfully!")

# Install packages
install_requirements()

# STEP 2: GENERATE DATA AND CREATE APPLICATION FILES
import json
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import uuid
import random

# Data Generator Class
class ZapProductDataGenerator:
    """Enhanced data generator for Project Concierge"""

    def __init__(self):
        self.categories = {
            "home_office": {
                "main_category": "Office & Work",
                "subcategories": ["Desks", "Chairs", "Monitors", "Audio/Video", "Storage", "Lighting"],
                "projects": ["video_conferencing_setup", "creative_workstation", "executive_office", "compact_workspace"],
                "needs": ["productivity", "ergonomics", "video_quality", "audio_clarity", "organization"]
            },
            "baby_preparation": {
                "main_category": "Baby & Kids",
                "subcategories": ["Nursery Furniture", "Feeding", "Baby Care", "Safety", "Travel"],
                "projects": ["first_baby_essentials", "nursery_setup", "feeding_station", "baby_travel_kit"],
                "needs": ["safety", "comfort", "convenience", "growth_adaptation", "easy_cleaning"]
            },
            "home_entertainment": {
                "main_category": "Electronics & Media",
                "subcategories": ["TVs", "Audio Systems", "Gaming", "Streaming", "Furniture"],
                "projects": ["living_room_theater", "gaming_setup", "music_system", "smart_home_entertainment"],
                "needs": ["picture_quality", "sound_quality", "gaming_performance", "streaming", "aesthetics"]
            }
        }

        self.brands = {
            "electronics": ["Samsung", "LG", "Sony", "Philips", "Logitech", "Dell", "HP"],
            "furniture": ["IKEA", "Keter", "Shilav", "Ofmart", "Alpha"],
            "baby": ["Chicco", "Graco", "Fisher-Price", "Philips Avent"],
            "accessories": ["Belkin", "Anker", "Trust", "Xiaomi"]
        }

    def generate_complete_dataset(self):
        """Generate comprehensive dataset"""
        products = []
        reviews = []

        # Home Office Products
        home_office_products = [
            {
                "product_id": "HO001", "name": "Samsung 27 inch 4K Monitor M7", "brand": "Samsung",
                "category": "home_office", "subcategory": "Monitors", "price": 1299, "original_price": 1499,
                "rating": 4.6, "review_count": 234, "in_stock": True,
                "features": ["4k_resolution", "usb_c_hub", "height_adjustable", "hdr_support"],
                "description": "Professional 4K monitor with smart features and USB-C connectivity for modern workspaces.",
                "project_tags": ["video_conferencing_setup", "creative_workstation"],
                "needs_addressed": ["productivity", "video_quality"], "seller": "Zap Direct", "warranty_months": 24
            },
            {
                "product_id": "HO002", "name": "Logitech C920s HD Pro Webcam", "brand": "Logitech",
                "category": "home_office", "subcategory": "Audio/Video", "price": 289, "rating": 4.3,
                "review_count": 456, "in_stock": True,
                "features": ["1080p_video", "privacy_shutter", "auto_focus", "noise_cancellation"],
                "description": "Professional HD webcam with privacy shutter for secure video conferencing.",
                "project_tags": ["video_conferencing_setup"], "needs_addressed": ["video_quality"],
                "seller": "TechZone", "warranty_months": 12
            },
            {
                "product_id": "HO003", "name": "IKEA Bekant Desk 160x80cm", "brand": "IKEA",
                "category": "home_office", "subcategory": "Desks", "price": 449, "rating": 4.2,
                "review_count": 789, "in_stock": True,
                "features": ["cable_management", "adjustable_legs", "spacious_surface"],
                "description": "Spacious office desk with built-in cable management for organized workspace.",
                "project_tags": ["video_conferencing_setup", "creative_workstation"],
                "needs_addressed": ["productivity", "organization"], "seller": "IKEA Israel", "warranty_months": 36
            },
            {
                "product_id": "HO004", "name": "Herman Miller Aeron Chair", "brand": "Herman Miller",
                "category": "home_office", "subcategory": "Chairs", "price": 2299, "original_price": 2599,
                "rating": 4.8, "review_count": 342, "in_stock": True,
                "features": ["ergonomic_design", "lumbar_support", "breathable_mesh", "adjustable_armrests"],
                "description": "Premium ergonomic office chair with advanced lumbar support and breathable mesh.",
                "project_tags": ["video_conferencing_setup", "executive_office"],
                "needs_addressed": ["ergonomics", "productivity"], "seller": "OfficeMax IL", "warranty_months": 60
            },
            {
                "product_id": "HO005", "name": "Blue Yeti USB Microphone", "brand": "Blue",
                "category": "home_office", "subcategory": "Audio/Video", "price": 399, "rating": 4.5,
                "review_count": 567, "in_stock": True,
                "features": ["studio_quality", "multiple_patterns", "mute_button", "headphone_monitoring"],
                "description": "Professional USB microphone with studio-quality recording for podcasts and calls.",
                "project_tags": ["video_conferencing_setup"], "needs_addressed": ["audio_clarity"],
                "seller": "AudioPro", "warranty_months": 24
            }
        ]

        # Baby Preparation Products
        baby_products = [
            {
                "product_id": "BP001", "name": "Chicco Next2Me Dream Crib", "brand": "Chicco",
                "category": "baby_preparation", "subcategory": "Nursery Furniture", "price": 849, "rating": 4.7,
                "review_count": 123, "in_stock": True,
                "features": ["bedside_attachment", "height_adjustable", "rocking_function", "mesh_sides"],
                "description": "Bedside crib that attaches to parent's bed for safe co-sleeping and easy nighttime care.",
                "project_tags": ["first_baby_essentials", "nursery_setup"],
                "needs_addressed": ["safety", "convenience"], "seller": "BabyWorld", "warranty_months": 24
            },
            {
                "product_id": "BP002", "name": "Maxi-Cosi Pebble 360 Car Seat", "brand": "Maxi-Cosi",
                "category": "baby_preparation", "subcategory": "Safety", "price": 1299, "rating": 4.6,
                "review_count": 234, "in_stock": True,
                "features": ["360_rotation", "isofix_base", "newborn_insert", "side_impact_protection"],
                "description": "Premium car seat with 360 degree rotation for easy access and maximum safety protection.",
                "project_tags": ["first_baby_essentials", "baby_travel_kit"],
                "needs_addressed": ["safety", "convenience"], "seller": "SafetyFirst IL", "warranty_months": 36
            },
            {
                "product_id": "BP003", "name": "Philips Avent Sterilizer", "brand": "Philips Avent",
                "category": "baby_preparation", "subcategory": "Feeding", "price": 189, "rating": 4.4,
                "review_count": 345, "in_stock": True,
                "features": ["steam_sterilization", "6_bottle_capacity", "auto_shutoff", "compact_design"],
                "description": "Electric steam sterilizer that kills 99.9% of germs in 6 minutes with automatic shut-off.",
                "project_tags": ["feeding_station", "first_baby_essentials"],
                "needs_addressed": ["safety", "convenience", "easy_cleaning"], "seller": "BabyTech", "warranty_months": 24
            }
        ]

        # Entertainment Products
        entertainment_products = [
            {
                "product_id": "EN001", "name": "Samsung 65 inch QLED 4K Smart TV", "brand": "Samsung",
                "category": "home_entertainment", "subcategory": "TVs", "price": 3299, "original_price": 3799,
                "rating": 4.5, "review_count": 456, "in_stock": True,
                "features": ["qled_display", "4k_hdr", "smart_tizen", "gaming_mode", "voice_control"],
                "description": "Premium QLED smart TV with vibrant colors, 4K HDR, and advanced gaming features.",
                "project_tags": ["living_room_theater", "gaming_setup"],
                "needs_addressed": ["picture_quality", "gaming_performance", "streaming"], "seller": "ElectroShop", "warranty_months": 24
            },
            {
                "product_id": "EN002", "name": "Sonos Arc Soundbar", "brand": "Sonos",
                "category": "home_entertainment", "subcategory": "Audio Systems", "price": 2199, "rating": 4.7,
                "review_count": 289, "in_stock": True,
                "features": ["dolby_atmos", "voice_control", "wireless_connectivity", "room_calibration"],
                "description": "Premium soundbar with Dolby Atmos surround sound and intelligent room calibration.",
                "project_tags": ["living_room_theater", "music_system"],
                "needs_addressed": ["sound_quality", "aesthetics"], "seller": "AudioMax", "warranty_months": 24
            }
        ]

        products = home_office_products + baby_products + entertainment_products

        # Generate bundles
        bundles = [
            {
                "bundle_id": "B001", "name": "Complete Video Conferencing Setup",
                "description": "Everything you need for professional remote meetings and calls",
                "project_type": "video_conferencing_setup",
                "products": ["HO001", "HO002", "HO003", "HO004", "HO005"],
                "total_original_price": 5035, "bundle_price": 4279, "savings": 756, "discount_percent": 15,
                "needs_addressed": ["productivity", "video_quality", "audio_clarity", "ergonomics", "organization"]
            },
            {
                "bundle_id": "B002", "name": "New Parent Essential Kit",
                "description": "Must-have items for welcoming your first baby safely and comfortably",
                "project_type": "first_baby_essentials",
                "products": ["BP001", "BP002", "BP003"],
                "total_original_price": 2337, "bundle_price": 1980, "savings": 357, "discount_percent": 15,
                "needs_addressed": ["safety", "convenience", "easy_cleaning"]
            },
            {
                "bundle_id": "B003", "name": "Premium Home Theater Package",
                "description": "Cinema-quality entertainment system for your living room",
                "project_type": "living_room_theater",
                "products": ["EN001", "EN002"],
                "total_original_price": 5498, "bundle_price": 4674, "savings": 824, "discount_percent": 15,
                "needs_addressed": ["picture_quality", "sound_quality", "streaming", "aesthetics"]
            }
        ]

        return {
            "products": products,
            "bundles": bundles,
            "categories": self.categories,
            "metadata": {
                "generated_at": datetime.now().isoformat(),
                "total_products": len(products),
                "currency": "ILS",
                "market": "Israel"
            }
        }

# Generate and save data
print("🔄 Generating product data...")
generator = ZapProductDataGenerator()
dataset = generator.generate_complete_dataset()

with open("zap_concierge_data.json", "w", encoding="utf-8") as f:
    json.dump(dataset, f, ensure_ascii=False, indent=2)

print(f"✅ Generated {len(dataset['products'])} products and {len(dataset['bundles'])} bundles")

# STEP 3: CREATE ENHANCED STREAMLIT APPLICATION - QUESTIONS FIRST + PRODUCT SPECS
app_code = '''
import streamlit as st
import json
import os
import pandas as pd
import numpy as np
from datetime import datetime
from typing import List, Dict, Any, Optional
import openai
from openai import OpenAI
import asyncio
import uuid

# Page config
st.set_page_config(
    page_title="Zap.co.il Project Concierge",
    page_icon="🛍️",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Enhanced CSS with better styling
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    .chat-message {
        padding: 1.2rem;
        margin: 0.8rem 0;
        border-radius: 12px;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    }

    .user-message {
        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        color: white;
        margin-left: 2rem;
    }

    .assistant-message {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        margin-right: 2rem;
        border-left: 4px solid #667eea;
        color: #2c3e50;
    }

    .question-box {
        background: linear-gradient(135deg, #fd79a8 0%, #e84393 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 12px;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }

    .product-suggestion {
        background: linear-gradient(135deg, #00b894 0%, #00cec9 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 12px;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }

    .specs-details {
        background: rgba(255,255,255,0.2);
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        font-size: 0.9em;
    }

    .needs-panel {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        padding: 1.5rem;
        border-radius: 12px;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .cart-summary {
        background: linear-gradient(135deg, #00b894 0%, #00cec9 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 12px;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }

    .cart-item {
        background: white;
        padding: 12px;
        margin: 8px 0;
        border-radius: 8px;
        border: 1px solid #ddd;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    }

    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 1.2rem;
        transition: all 0.3s ease;
        font-weight: 500;
    }

    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
</style>
""", unsafe_allow_html=True)

class ZapProjectConcierge:
    def __init__(self):
        self.client = None
        self.products = []
        self.bundles = []
        self.categories = {}
        self.currency_symbol = "ILS"

        # Initialize OpenAI and load data
        self.setup_openai()
        self.load_data()

    def setup_openai(self):
        """Setup OpenAI client with API key"""
        api_key = None

        # Try different methods to get API key
        api_key = "OPENAI_API_KEY"

        if not api_key:
            try:
                api_key = st.secrets["OPENAI_API_KEY"]
            except:
                pass

        if not api_key:
            st.sidebar.error("⚠️ OpenAI API Key Required")
            api_key = st.sidebar.text_input("Enter your OpenAI API Key:", type="password")
            if api_key:
                os.environ["OPENAI_API_KEY"] = api_key

        if api_key:
            self.client = OpenAI(api_key=api_key)
        else:
            st.error("❌ No OpenAI API key provided. Please set OPENAI_API_KEY environment variable or enter it in the sidebar.")

    def load_data(self):
        """Load product data"""
        try:
            with open("zap_concierge_data.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                self.products = data["products"]
                self.bundles = data["bundles"]
                self.categories = data["categories"]
        except Exception as e:
            st.error(f"Error loading data: {e}")

    def detect_user_language(self, query: str) -> str:
        """Detect if user is writing in Hebrew, English, or Arabic"""
        hebrew_chars = sum(1 for c in query if '\u0590' <= c <= '\u05FF')
        arabic_chars = sum(1 for c in query if '\u0600' <= c <= '\u06FF')
        total_chars = len([c for c in query if c.isalpha()])

        if total_chars == 0:
            return "english"  # Default

        hebrew_ratio = hebrew_chars / total_chars
        arabic_ratio = arabic_chars / total_chars

        if hebrew_ratio > 0.3:
            return "hebrew"
        elif arabic_ratio > 0.3:
            return "arabic"
        else:
            return "english"

    def detect_user_needs(self, query: str) -> List[str]:
        """Detect if user is writing in Hebrew, English, or Arabic"""
        hebrew_chars = sum(1 for c in query if '\u0590' <= c <= '\u05FF')
        arabic_chars = sum(1 for c in query if '\u0600' <= c <= '\u06FF')
        total_chars = len([c for c in query if c.isalpha()])

        if total_chars == 0:
            return "english"  # Default

        hebrew_ratio = hebrew_chars / total_chars
        arabic_ratio = arabic_chars / total_chars

        if hebrew_ratio > 0.3:
            return "hebrew"
        elif arabic_ratio > 0.3:
            return "arabic"
        else:
            return "english"
        """Detect user needs from query using keyword analysis"""
        needs_keywords = {
            "productivity": ["work", "office", "productive", "efficient", "organize", "desk", "workspace"],
            "video_quality": ["video", "camera", "webcam", "calls", "meetings", "conference", "zoom"],
            "audio_clarity": ["audio", "microphone", "sound", "calls", "clear", "voice", "speak"],
            "ergonomics": ["comfortable", "ergonomic", "back", "posture", "health", "chair", "sitting"],
            "safety": ["safe", "safety", "secure", "baby", "child", "protection", "infant"],
            "convenience": ["easy", "convenient", "simple", "quick", "automatic", "fast"],
            "picture_quality": ["tv", "display", "picture", "4k", "hd", "resolution", "screen"],
            "sound_quality": ["audio", "sound", "music", "speakers", "surround", "bass"],
            "aesthetics": ["beautiful", "design", "style", "modern", "look", "appearance", "decor"]
        }

        detected_needs = []
        query_lower = query.lower()

        for need, keywords in needs_keywords.items():
            if any(keyword in query_lower for keyword in keywords):
                detected_needs.append(need)

        return detected_needs

    def format_price(self, price):
        """Format price with currency"""
        return f"{price:,} {self.currency_symbol}"

    def get_product_specs_display(self, product: Dict) -> str:
        """Generate detailed specs display for a product"""
        specs_text = ""

        # Add key features from existing data
        if "features" in product:
            features = product["features"]
            feature_display = []
            for feature in features[:4]:  # Show top 4 features
                # Convert feature codes to readable text
                readable_feature = feature.replace("_", " ").title()
                if "4k" in feature.lower():
                    readable_feature = "4K Resolution"
                elif "usb_c" in feature.lower():
                    readable_feature = "USB-C Hub"
                elif "1080p" in feature.lower():
                    readable_feature = "1080P HD Video"
                elif "studio_quality" in feature.lower():
                    readable_feature = "Studio Quality Audio"
                elif "ergonomic" in feature.lower():
                    readable_feature = "Ergonomic Design"
                elif "dolby_atmos" in feature.lower():
                    readable_feature = "Dolby Atmos Sound"

                feature_display.append(readable_feature)

            specs_text += f"🔧 **Key Features:** {', '.join(feature_display)}\\n"

        # Add rating and reviews
        specs_text += f"⭐ **Rating:** {product['rating']}/5 ({product['review_count']} reviews)\\n"

        # Add seller and warranty
        specs_text += f"🏪 **Seller:** {product['seller']}\\n"
        specs_text += f"🛡️ **Warranty:** {product['warranty_months']} months\\n"

        # Add price comparison if original price exists
        if "original_price" in product and product["original_price"] > product["price"]:
            savings = product["original_price"] - product["price"]
            specs_text += f"💰 **You Save:** {self.format_price(savings)} (was {self.format_price(product['original_price'])})\\n"

        return specs_text

    def get_ai_response_with_questions_and_specs(self, messages: List[Dict], detected_needs: List[str]) -> Dict:
        """Get AI response - ask questions first, then suggest 2 options per detected need with specs"""
        if not self.client:
            return {
                "response": "I need an OpenAI API key to provide intelligent recommendations. Please add your API key.",
                "questions": [],
                "products_by_need": {}
            }

        try:
            # Check if this is the first interaction or if we need more info
            conversation_length = len([m for m in messages if m["role"] == "user"])
            needs_clarifying_questions = conversation_length <= 2  # Ask questions for first 2 interactions

            # Get 2 products per detected need - ENSURE 2 OPTIONS
            products_by_need = {}
            for need in detected_needs:
                need_products = [p for p in self.products
                               if need in p.get("needs_addressed", [])]
                # Sort by rating and get top products
                need_products.sort(key=lambda x: x["rating"], reverse=True)

                # ENSURE we always have 2 options per need
                if len(need_products) >= 2:
                    products_by_need[need] = need_products[:2]
                elif len(need_products) == 1:
                    # If only 1 product for this need, add another similar product
                    products_by_need[need] = need_products
                    # Try to find a second option from same category
                    same_category = [p for p in self.products
                                   if p.get("category") == need_products[0].get("category")
                                   and p not in need_products]
                    if same_category:
                        products_by_need[need].append(same_category[0])
                else:
                    # No products for this need, skip it
                    continue
            # Detect user language from the latest message
            user_language = "english"  # default
            if messages:
                last_user_msg = [m for m in messages if m["role"] == "user"]
                if last_user_msg:
                    user_language = self.detect_user_language(last_user_msg[-1]["content"])

            # Create context
            context = f"""
Detected user needs: {detected_needs}
User language: {user_language}
Conversation length: {conversation_length}
Available products by need: {json.dumps(products_by_need, indent=2)}
"""

            if needs_clarifying_questions:
                language_instruction = {
                    "hebrew": "Respond primarily in Hebrew with some English mixed in naturally. Use Hebrew for main conversation and English for technical terms.",
                    "arabic": "Respond primarily in Arabic with some English mixed in naturally. Use Arabic for main conversation and English for technical terms.",
                    "english": "Respond in English with Hebrew phrases mixed in naturally for Israeli market feel."
                }

                system_prompt = f"""You are Zap.co.il's expert shopping consultant. Your job is to ask 1-2 specific clarifying questions to better understand the customer's needs BEFORE suggesting products.

LANGUAGE: {language_instruction.get(user_language, language_instruction["english"])}

IMPORTANT: For the first 1-2 interactions, focus on asking questions to understand:
- Budget range
- Timeline/urgency
- Space/room size
- Usage frequency (daily, weekly, occasional)
- Experience level (beginner, intermediate, expert)
- Specific preferences (colors, brands, styles)
- Who will use it (personal, family, professional)

Ask questions that are relevant to their detected needs: {detected_needs}

DO NOT suggest products yet - only ask 1-2 focused questions to understand their requirements better.

Keep questions conversational and helpful."""
            else:
                language_instruction = {
                    "hebrew": "Respond primarily in Hebrew with some English mixed in naturally. Use Hebrew for explanations and English for technical specifications.",
                    "arabic": "Respond primarily in Arabic with some English mixed in naturally. Use Arabic for explanations and English for technical specifications.",
                    "english": "Respond in English with Hebrew phrases mixed in naturally for Israeli market feel."
                }

                system_prompt = f"""You are Zap.co.il's expert shopping consultant. Now that you understand the customer's needs better, suggest products organized by need category.

LANGUAGE: {language_instruction.get(user_language, language_instruction["english"])}

For each detected need ({detected_needs}), I will show exactly 2 product options with detailed explanations.

For each product, explain:
1. Why this specific product matches their stated requirements
2. Key benefits for their use case
3. What makes it special compared to alternatives
4. Value proposition for their budget

Provide personalized, consultative recommendations organized by need category.

Available products organized by need: {json.dumps(products_by_need, indent=2)}"""

            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "system", "content": system_prompt}] + messages,
                temperature=0.7,
                max_tokens=500
            )

            ai_text = response.choices[0].message.content

            if needs_clarifying_questions:
                # Parse questions from AI response
                questions = []
                lines = ai_text.split('\\n')
                for line in lines:
                    if '?' in line:
                        # Clean up the question
                        question = line.strip()
                        # Remove bullets, numbers, etc.
                        question = question.lstrip('- •123456789. ').strip()
                        if question:
                            questions.append(question)

                return {
                    "response": ai_text,
                    "questions": questions[:2],  # Limit to 2 questions
                    "products_by_need": {}
                }
            else:
                return {
                    "response": ai_text,
                    "questions": [],
                    "products_by_need": products_by_need  # Return products organized by need
                }

        except Exception as e:
            # Fallback response
            if conversation_length <= 2:
                return {
                    "response": f"I'm having technical difficulties, but I'd love to help! To give you the best recommendations, could you tell me: What's your budget range? And when do you need this setup ready?",
                    "questions": ["What's your budget range for this project?", "When do you need this ready?"],
                    "products_by_need": {}
                }
            else:
                # Create fallback products by need
                fallback_products_by_need = {}
                for need in detected_needs:
                    need_products = [p for p in self.products
                                   if need in p.get("needs_addressed", [])][:2]
                    if need_products:
                        fallback_products_by_need[need] = need_products

                return {
                    "response": f"Based on your needs, I have some great product suggestions organized by category!",
                    "questions": [],
                    "products_by_need": fallback_products_by_need
                }

    def find_product_by_id(self, product_id: str) -> Optional[Dict]:
        """Find product by ID"""
        for product in self.products:
            if product["product_id"] == product_id:
                return product
        return None

    def generate_order_html(self, cart_items: List[Dict], total: float) -> str:
        """Generate complete HTML order summary"""
        shekel = "&#8362;"

        html_content = f"""
<!DOCTYPE html>
<html dir="rtl" lang="he">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zap.co.il Order Summary</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f5f7fa; margin: 0; padding: 20px; }}
        .container {{ max-width: 800px; margin: 0 auto; background: white; border-radius: 15px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }}
        .content {{ padding: 30px; }}
        .order-table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
        .order-table th {{ background: #3498db; color: white; padding: 15px; text-align: right; }}
        .order-table td {{ padding: 12px; border-bottom: 1px solid #ecf0f1; text-align: right; }}
        .total-row {{ background: #34495e; color: white; font-weight: bold; font-size: 1.2em; }}
        .benefits {{ background: #e8f5e8; padding: 20px; border-radius: 10px; margin: 20px 0; border-right: 4px solid #27ae60; }}
        .footer {{ text-align: center; color: #7f8c8d; margin-top: 30px; }}
        .price {{ color: #e74c3c; font-weight: bold; }}
        .brand {{ color: #7f8c8d; font-size: 0.9em; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🛍️ Zap.co.il</h1>
            <h2>סיכום הזמנה - Order Summary</h2>
            <p>Generated by AI Project Concierge</p>
        </div>
        <div class="content">
            <h3>פרטי הזמנה - Order Details</h3>
            <table class="order-table">
                <thead>
                    <tr>
                        <th>מוצר - Product</th>
                        <th>מחיר - Price</th>
                        <th>דירוג - Rating</th>
                    </tr>
                </thead>
                <tbody>
"""

        # Add items
        for item in cart_items:
            stars = "⭐" * int(item['rating'])
            html_content += f"""
                    <tr>
                        <td>
                            <strong>{item['name']}</strong><br>
                            <span class="brand">{item['brand']} | {item['seller']}</span>
                        </td>
                        <td class="price">{item['price']:,}{shekel}</td>
                        <td>{stars} {item['rating']}</td>
                    </tr>
"""

        html_content += f"""
                </tbody>
                <tfoot>
                    <tr class="total-row">
                        <td>סה"כ - TOTAL</td>
                        <td>{total:,.0f}{shekel}</td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>

            <div class="benefits">
                <h4 style="color: #27ae60; margin: 0 0 15px 0;">✅ יתרונות ההזמנה - Order Benefits</h4>
                <ul style="margin: 0; color: #2c3e50;">
                    <li>משלוח חינם על הזמנות מעל 500{shekel} - Free shipping over 500{shekel}</li>
                    <li>שירות לקוחות 24/7 - 24/7 Customer support</li>
                    <li>אחריות על כל המוצרים - Warranty on all products</li>
                    <li>זכות החזרה 30 יום - 30-day return policy</li>
                </ul>
            </div>

            <div class="footer">
                <p>נוצר על ידי Zap.co.il Project Concierge AI</p>
                <p>Generated on {datetime.now().strftime('%d/%m/%Y at %H:%M')}</p>
            </div>
        </div>
    </div>
</body>
</html>
"""
        return html_content

def main():
    # Initialize session state
    if 'concierge' not in st.session_state:
        st.session_state.concierge = ZapProjectConcierge()

    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []

    if 'cart' not in st.session_state:
        st.session_state.cart = []

    if 'detected_needs' not in st.session_state:
        st.session_state.detected_needs = []

    if 'ai_questions' not in st.session_state:
        st.session_state.ai_questions = []

    if 'products_by_need' not in st.session_state:
        st.session_state.products_by_need = {}

    if 'show_order_download' not in st.session_state:
        st.session_state.show_order_download = False

    concierge = st.session_state.concierge

    # Header
    st.markdown("""
    <div class="main-header">
        <h1>🛍️ Zap.co.il Project Concierge</h1>
        <p>Your Personal AI Shopping Consultant</p>
        <p style="font-size: 0.9em; opacity: 0.9;">Smart Questions • Detailed Specs • Perfect Matches</p>
    </div>
    """, unsafe_allow_html=True)

    # Main layout
    col1, col2, col3 = st.columns([2.5, 1, 1.5])

    with col1:
        st.markdown("## 💬 Chat with Your AI Shopping Consultant")

        # Display chat history
        for message in st.session_state.chat_history:
            if message["role"] == "user":
                st.markdown(f"""
                <div class="chat-message user-message">
                    <strong>You:</strong> {message["content"]}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="chat-message assistant-message">
                    <strong>🤖 Your Shopping Consultant:</strong> {message["content"]}
                </div>
                """, unsafe_allow_html=True)

        # AI Questions Display
        if st.session_state.ai_questions:
            st.markdown("### 🤔 Help me understand better...")
            for i, question in enumerate(st.session_state.ai_questions):
                st.markdown(f"""
                <div class="question-box">
                    <strong>❓ Question {i+1}:</strong> {question}
                </div>
                """, unsafe_allow_html=True)

        # Product Suggestions Organized by Need with Direct Add Buttons
        if st.session_state.products_by_need:
            st.markdown("### 🎯 Perfect Products for Your Needs")

            # Display products organized by need category
            for need, products in st.session_state.products_by_need.items():
                if products:  # Only show if there are products for this need
                    # Need category header
                    need_display = {
                        "productivity": "💼 Productivity Solutions",
                        "video_quality": "📹 Video Quality Options",
                        "audio_clarity": "🎤 Audio Clarity Choices",
                        "ergonomics": "🪑 Ergonomic Options",
                        "safety": "🛡️ Safety Solutions",
                        "convenience": "⚡ Convenience Options",
                        "picture_quality": "📺 Picture Quality Options",
                        "sound_quality": "🔊 Sound Quality Choices",
                        "aesthetics": "✨ Design & Aesthetics"
                    }

                    category_name = need_display.get(need, need.title().replace('_', ' '))
                    st.markdown(f"#### {category_name}")

                    # Ensure we have exactly 2 products per need
                    products_to_show = products[:2] if len(products) >= 2 else products
                    if len(products_to_show) == 1:
                        # If only 1 product, try to find another one for this need
                        all_need_products = [p for p in concierge.products
                                           if need in p.get("needs_addressed", [])]
                        for p in all_need_products:
                            if p not in products_to_show:
                                products_to_show.append(p)
                                break

                    # Show options in columns
                    if len(products_to_show) >= 2:
                        col_opt1, col_opt2 = st.columns(2)
                        columns = [col_opt1, col_opt2]
                    else:
                        columns = [st.columns(1)[0]]

                    for idx, product in enumerate(products_to_show[:2]):  # Maximum 2 products per need
                        with columns[idx]:
                            # Get detailed specs
                            specs_display = concierge.get_product_specs_display(product)

                            # Product card with specs
                            st.markdown(f"""
                            <div class="product-suggestion">
                                <h5 style="margin: 0 0 8px 0;">Option {idx + 1}: {product['name']}</h5>
                                <div style="font-size: 1.1em; font-weight: bold; margin: 8px 0;">
                                    💰 {concierge.format_price(product['price'])}
                                </div>
                                <div class="specs-details">
                                    {specs_display}
                                </div>
                                <div style="margin-top: 8px; font-style: italic; opacity: 0.9; font-size: 0.85em;">
                                    "{product['description']}"
                                </div>
                            </div>
                            """, unsafe_allow_html=True)

                            # IMPORTANT: Add to Cart button for each option
                            button_key = f"add_need_{need}_{product['product_id']}_{idx}_{len(st.session_state.chat_history)}"

                            if st.button(
                                f"🛒 Add Option {idx + 1} to Cart",
                                key=button_key,
                                help=f"Add {product['name']} to cart",
                                use_container_width=True
                            ):
                                st.session_state.cart.append(product)
                                st.success(f"✅ Added {product['name']} to cart!")
                                st.rerun()

                    st.markdown("---")  # Separator between need categories

        # Chat input
        user_input = st.chat_input("Tell me about your project... (e.g., 'I need a home office for daily video calls')")

        if user_input:
            # Add user message
            st.session_state.chat_history.append({"role": "user", "content": user_input})

            # Detect needs
            detected_needs = concierge.detect_user_needs(user_input)
            # Ensure detected_needs is always a list
            if isinstance(detected_needs, str):
                detected_needs = [detected_needs]
            elif not isinstance(detected_needs, list):
                detected_needs = []

            st.session_state.detected_needs = list(set(st.session_state.detected_needs + detected_needs))

            # Get AI response with questions and product suggestions organized by need
            ai_result = concierge.get_ai_response_with_questions_and_specs(st.session_state.chat_history, detected_needs)

            # Add AI response
            st.session_state.chat_history.append({"role": "assistant", "content": ai_result["response"]})
            st.session_state.ai_questions = ai_result["questions"]
            st.session_state.products_by_need = ai_result["products_by_need"]

            st.rerun()

        # Quick start options
        if not st.session_state.chat_history:
            st.markdown("### 🚀 Quick Project Setup")
            st.markdown("*Get personalized recommendations instantly*")

            col_q1, col_q2, col_q3 = st.columns(3)

            with col_q1:
                if st.button("🏢 Home Office", key="quick_office", help="Get office setup recommendations"):
                    st.session_state.chat_history.append({
                        "role": "user",
                        "content": "I need to set up a home office for remote work"
                    })
                    # Ensure detected_needs is a list for quick setup
                    st.session_state.detected_needs = ["productivity", "video_quality", "ergonomics"]
                    st.session_state.chat_history.append({
                        "role": "assistant",
                        "content": "Great! I'll help you create the perfect home office setup. Let me ask a couple of questions to give you the best recommendations."
                    })
                    st.session_state.ai_questions = [
                        "What's your budget range for the home office setup?",
                        "How often will you be doing video calls - daily, weekly, or occasionally?"
                    ]
                    st.rerun()

            with col_q2:
                if st.button("👶 Baby Prep", key="quick_baby", help="Get baby essentials recommendations"):
                    st.session_state.chat_history.append({
                        "role": "user",
                        "content": "I'm preparing for my first baby and need essential items"
                    })
                    # Ensure detected_needs is a list for quick setup
                    st.session_state.detected_needs = ["safety", "convenience"]
                    st.session_state.chat_history.append({
                        "role": "assistant",
                        "content": "Congratulations on your upcoming arrival! I'll help you get everything ready. Let me understand your needs better."
                    })
                    st.session_state.ai_questions = [
                        "When is your due date or baby's age?",
                        "What's your budget range for baby essentials?"
                    ]
                    st.rerun()

            with col_q3:
                if st.button("📺 Entertainment", key="quick_entertainment", help="Get home theater recommendations"):
                    st.session_state.chat_history.append({
                        "role": "user",
                        "content": "I want to upgrade my home entertainment system"
                    })
                    # Ensure detected_needs is a list for quick setup
                    st.session_state.detected_needs = ["picture_quality", "sound_quality"]
                    st.session_state.chat_history.append({
                        "role": "assistant",
                        "content": "Excellent! I'll help you create an amazing entertainment experience. Let me ask a few questions first."
                    })
                    st.session_state.ai_questions = [
                        "What's your room size and viewing distance?",
                        "What's your budget range for the entertainment system?"
                    ]
                    st.rerun()

    with col2:
        # Detected Needs Panel
        st.markdown("## 🎯 Your Needs")
        if st.session_state.detected_needs:
            needs_display = {
                "productivity": "💼 Productivity",
                "video_quality": "📹 Video Quality",
                "audio_clarity": "🎤 Audio Clarity",
                "ergonomics": "🪑 Ergonomics",
                "safety": "🛡️ Safety",
                "convenience": "⚡ Convenience",
                "picture_quality": "📺 Picture Quality",
                "sound_quality": "🔊 Sound Quality",
                "aesthetics": "✨ Aesthetics"
            }

            needs_html = '<div class="needs-panel"><h4 style="margin-top: 0; color: #2c3e50;">Detected from our conversation:</h4>'
            for need in set(st.session_state.detected_needs):
                display_name = needs_display.get(need, need.title())
                needs_html += f'<div style="margin: 8px 0; padding: 10px; background: rgba(255,255,255,0.8); border-radius: 8px; border-right: 3px solid #3498db;"><strong>{display_name}</strong></div>'
            needs_html += '</div>'

            st.markdown(needs_html, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="needs-panel">
                <p style="margin: 0; color: #7f8c8d; text-align: center;">
                    💭 Start chatting and I'll understand your needs!
                </p>
            </div>
            """, unsafe_allow_html=True)

    with col3:
        # Shopping Cart
        st.markdown("## 🛒 Your Cart")

        if st.session_state.cart:
            total = sum(item["price"] for item in st.session_state.cart)

            # Cart summary
            st.markdown(f"""
            <div class="cart-summary">
                <h4 style="margin: 0 0 10px 0;">Cart Summary</h4>
                <p style="margin: 5px 0; font-size: 1.1em;"><strong>Items: {len(st.session_state.cart)}</strong></p>
                <p style="margin: 5px 0; font-size: 1.3em;"><strong>Total: {concierge.format_price(total)}</strong></p>
            </div>
            """, unsafe_allow_html=True)

            # Cart items
            for i, item in enumerate(st.session_state.cart):
                col_item, col_remove = st.columns([4, 1])

                with col_item:
                    st.markdown(f"""
                    <div class="cart-item">
                        <div style="font-weight: bold; color: #2c3e50;">{item['name'][:30]}...</div>
                        <div style="color: #e74c3c; font-weight: bold; margin: 5px 0;">{concierge.format_price(item['price'])}</div>
                        <div style="font-size: 0.8em; color: #7f8c8d;">{item['brand']}</div>
                    </div>
                    """, unsafe_allow_html=True)

                with col_remove:
                    if st.button("🗑️", key=f"remove_{i}", help="Remove item"):
                        st.session_state.cart.pop(i)
                        st.rerun()

            # Action buttons
            col_clear, col_order = st.columns(2)

            with col_clear:
                if st.button("🗑️ Clear All", key="clear_cart"):
                    st.session_state.cart = []
                    st.session_state.show_order_download = False
                    st.rerun()

            with col_order:
                if st.button("📋 Generate Order", key="generate_order"):
                    st.session_state.show_order_download = True
                    st.success("✅ Order summary ready!")
                    st.rerun()

            # Show download button if order was generated
            if st.session_state.show_order_download:
                st.markdown("---")
                html_order = concierge.generate_order_html(st.session_state.cart, total)

                st.download_button(
                    label="💾 Download Order Summary",
                    data=html_order,
                    file_name=f"zap_order_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
                    mime="text/html",
                    key="download_order"
                )

                st.markdown("*Professional HTML order summary with Hebrew/English support*")

        else:
            st.markdown("""
            <div style="text-align: center; padding: 30px; color: #95a5a6; background: #f8f9fa; border-radius: 10px; border: 2px dashed #ddd;">
                <h4>🛒 Your cart is empty</h4>
                <p>Start chatting or use quick setup!</p>
            </div>
            """, unsafe_allow_html=True)

        # Bundle offers section (kept for reference but de-emphasized)
        st.markdown("---")
        st.markdown("## 💡 Quick Bundles")
        st.markdown("*Complete solutions if you prefer all-in-one packages*")

        for bundle in concierge.bundles:
            with st.expander(f"📦 {bundle['name']}"):
                st.markdown(f"**Description:** {bundle['description']}")
                st.markdown(f"**Bundle Price:** {bundle['bundle_price']:,} ILS")
                st.markdown(f"**You Save:** {bundle['savings']:,} ILS")

                if st.button(f"🛒 Add Complete Bundle", key=f"bundle_{bundle['bundle_id']}"):
                    bundle_products = [p for p in concierge.products if p['product_id'] in bundle['products']]
                    st.session_state.cart.extend(bundle_products)
                    st.success(f"✅ Added {bundle['name']} bundle!")
                    st.rerun()

    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; padding: 25px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 15px; margin-top: 30px;">
        <h3 style="color: #2c3e50; margin-bottom: 15px;">🛍️ Zap.co.il Project Concierge</h3>
        <p style="color: #7f8c8d; margin: 8px 0; font-size: 1.1em;">Your Personal AI Shopping Consultant</p>
        <p style="color: #95a5a6; font-size: 0.9em; margin: 8px 0;">Smart questions • Detailed specs • Perfect recommendations</p>
        <div style="margin-top: 20px;">
            <span style="background: #3498db; color: white; padding: 6px 12px; border-radius: 15px; font-size: 0.85em; margin: 0 8px;">🤔 Smart Questions</span>
            <span style="background: #e74c3c; color: white; padding: 6px 12px; border-radius: 15px; font-size: 0.85em; margin: 0 8px;">🔧 Detailed Specs</span>
            <span style="background: #27ae60; color: white; padding: 6px 12px; border-radius: 15px; font-size: 0.85em; margin: 0 8px;">🎯 Perfect Matches</span>
        </div>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
'''

# Save the enhanced Streamlit app
with open("app.py", "w", encoding="utf-8") as f:
    f.write(app_code)

# STEP 4: SET UP ENVIRONMENT AND API KEY
import os

# Set OpenAI API key - REPLACE WITH YOUR ACTUAL API KEY
OPENAI_API_KEY = "OPENAI_API_KEY"  # Replace with your actual API key
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY

print("🔧 Environment setup complete!")

# STEP 5: ENHANCED COLAB RUNNER WITH NGROK
def run_zap_concierge():
    """Enhanced function to run everything in Colab"""
    from pyngrok import ngrok
    import subprocess
    import time

    print("🚀 Starting Enhanced Zap.co.il Project Concierge...")

    # Set ngrok auth token
    ngrok.set_auth_token("2lvQQaNLPYs8HT4KH7DIuRFwap7_5D3ZPS7iUAvhRqokYMaXY")

    # Create ngrok tunnel
    public_url = ngrok.connect(8501, "http")
    print("✅ Streamlit will be exposed at:", public_url)

    # Display enhanced startup info
    print("=" * 70)
    print("🛍️  ZAP.CO.IL PROJECT CONCIERGE - QUESTIONS FIRST + SPECS VERSION")
    print("=" * 70)
    print("🎯 NEW Enhanced Features:")
    print("   • 🤔 AI asks 1-2 smart questions FIRST before suggesting products")
    print("   • 🔧 Detailed product specs with key features and benefits")
    print("   • 🎯 Individual product recommendations (not bundles)")
    print("   • ⭐ Rating, warranty, and seller information for each product")
    print("   • 💰 Price comparisons and savings highlights")
    print("   • 📋 Professional order generation with full details")
    print("=" * 70)
    print("💡 How it works:")
    print("   1. Tell the AI about your project needs")
    print("   2. AI asks 1-2 clarifying questions (budget, timeline, etc.)")
    print("   3. AI suggests 2-3 perfect individual products with full specs")
    print("   4. Add products to cart and generate professional orders")
    print("=" * 70)
    print(f"🌐 Access your enhanced app at: {public_url}")
    print("🚀 Ready to provide smart consultative shopping!")
    print("=" * 70)

    # Start Streamlit with enhanced settings
    import IPython
    IPython.get_ipython().system_raw("streamlit run app.py --server.port=8501 --server.address=0.0.0.0 --server.headless=true &")

    return public_url

# FINAL EXECUTION INSTRUCTIONS
print("🎉 Enhanced Zap.co.il Project Concierge Setup Complete!")
print("=" * 50)
print("📝 IMPORTANT: Set your OpenAI API key first:")
print("   OPENAI_API_KEY = 'sk-your-actual-api-key-here'")
print("   os.environ['OPENAI_API_KEY'] = OPENAI_API_KEY")
print("=" * 50)
print("🚀 Then execute: run_zap_concierge()")
print("=" * 50)
print()
print("✨ NEW APPROACH - QUESTIONS FIRST + DETAILED SPECS:")
print("   ✅ AI asks smart clarifying questions BEFORE suggesting products")
print("   ✅ Individual product recommendations with detailed specifications")
print("   ✅ Key features, ratings, warranties, and seller information")
print("   ✅ Price comparisons and savings highlights")
print("   ✅ Professional product descriptions and benefits")
print("   ✅ Focus on individual products rather than bundles")
print("   ✅ Better user experience with consultative approach")

# Uncomment the line below to run immediately after setting API key
# public_url = run_zap_concierge()

public_url = run_zap_concierge()

from pyngrok import ngrok
ngrok.kill()